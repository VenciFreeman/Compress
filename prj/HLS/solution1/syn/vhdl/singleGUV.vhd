-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity singleGUV is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    subimg_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    subimg_ce0 : OUT STD_LOGIC;
    subimg_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    u : IN STD_LOGIC_VECTOR (3 downto 0);
    v : IN STD_LOGIC_VECTOR (3 downto 0);
    inv : IN STD_LOGIC_VECTOR (31 downto 0);
    cosMat_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cosMat_ce0 : OUT STD_LOGIC;
    cosMat_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of singleGUV is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv64_3FC6A09E60000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111000110101000001001111001100000000000000000000000000000";
    constant ap_const_lv64_3FD0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FE6A09E60000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100110101000001001111001100000000000000000000000000000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_135_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_152 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_reg_404 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_157 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_144_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_163 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal reg_168 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_409 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i1_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i1_reg_414 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_196_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_6_fu_204_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_cast2_cast_fu_212_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_cast2_cast_reg_429 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_19_cast_fu_222_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_cast_reg_434 : STD_LOGIC_VECTOR (7 downto 0);
    signal u_cast1_cast_fu_226_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal u_cast1_cast_reg_439 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_cast_fu_236_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_cast_reg_444 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_449 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_cast_fu_252_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_cast_reg_454 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal x_fu_282_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_reg_472 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i2_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i2_reg_477 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_294_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_482 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal cosMat_addr_2_reg_492 : STD_LOGIC_VECTOR (5 downto 0);
    signal cosMat_addr_3_reg_497 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_fu_353_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_reg_505 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i3_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i3_reg_510 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_365_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_reg_520 : STD_LOGIC_VECTOR (63 downto 0);
    signal G_2_in_v_fu_373_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal G_2_in_v_reg_525 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_140_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal G_2_in_reg_530 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal x_assign_reg_110 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_assign_1_reg_121 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_24_cast_fu_261_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_cast_fu_271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_cast_fu_310_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_cast_fu_320_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_cast_fu_342_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal G_fu_42 : STD_LOGIC_VECTOR (31 downto 0);
    signal G_1_fu_132_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_135_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_144_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_144_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_18_fu_215_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_19_fu_229_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_fu_244_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal x_assign_cast2_cast_fu_240_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_256_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_266_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_1_cast1_cas_fu_301_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_305_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_315_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_325_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_29_cast_fu_333_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_337_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);

    component DCT_8x8_2D_fptrunbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DCT_8x8_2D_fpext_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component DCT_8x8_2D_dadd_6dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component DCT_8x8_2D_dmul_6eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    DCT_8x8_2D_fptrunbkb_U0 : component DCT_8x8_2D_fptrunbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => G_2_in_reg_530,
        dout => G_1_fu_132_p1);

    DCT_8x8_2D_fpext_cud_U1 : component DCT_8x8_2D_fpext_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_135_p0,
        dout => grp_fu_135_p1);

    DCT_8x8_2D_dadd_6dEe_U2 : component DCT_8x8_2D_dadd_6dEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_157,
        din1 => G_2_in_v_reg_525,
        ce => ap_const_logic_1,
        dout => grp_fu_140_p2);

    DCT_8x8_2D_dmul_6eOg_U3 : component DCT_8x8_2D_dmul_6eOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_144_p0,
        din1 => grp_fu_144_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_144_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    G_fu_42_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state29))) then 
                G_fu_42 <= G_1_fu_132_p1;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                G_fu_42 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_assign_1_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
                x_assign_1_reg_121 <= ap_const_lv4_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state29))) then 
                x_assign_1_reg_121 <= y_reg_505;
            end if; 
        end if;
    end process;

    x_assign_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8) and not((ap_const_lv1_0 = exitcond_fu_347_p2)))) then 
                x_assign_reg_110 <= x_reg_472;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
                x_assign_reg_110 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state28))) then
                G_2_in_reg_530 <= grp_fu_140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state24))) then
                G_2_in_v_reg_525 <= G_2_in_v_fu_373_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((tmp_reg_404 = ap_const_lv1_0)) and (ap_const_lv1_1 = ap_CS_fsm_state8))) then
                cosMat_addr_2_reg_492 <= tmp_27_cast_fu_320_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_404 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_state8))) then
                cosMat_addr_3_reg_497 <= tmp_30_cast_fu_342_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state7) and not((tmp_reg_404 = ap_const_lv1_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state7) and (tmp_reg_404 = ap_const_lv1_0)))) then
                reg_152 <= grp_fu_135_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state9)) or (not((tmp_reg_404 = ap_const_lv1_0)) and (ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_state24)))) then
                reg_157 <= grp_fu_135_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_reg_404 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_state12)) or ((tmp_reg_404 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_state16)) or ((tmp_reg_404 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_state20)))) then
                reg_163 <= grp_fu_144_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((tmp_reg_404 = ap_const_lv1_0)) and (ap_const_lv1_1 = ap_CS_fsm_state17)) or (not((tmp_reg_404 = ap_const_lv1_0)) and (ap_const_lv1_1 = ap_CS_fsm_state13)) or (not((tmp_reg_404 = ap_const_lv1_0)) and (ap_const_lv1_1 = ap_CS_fsm_state21)))) then
                reg_168 <= grp_fu_144_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_404 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_state20))) then
                tmp_16_reg_520 <= grp_fu_135_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((tmp_reg_404 = ap_const_lv1_0)) and (ap_const_lv1_1 = ap_CS_fsm_state5))) then
                    tmp_19_cast_reg_434(6 downto 3) <= tmp_19_cast_fu_222_p1(6 downto 3);
                    tmp_21_cast_reg_444(6 downto 3) <= tmp_21_cast_fu_236_p1(6 downto 3);
                tmp_7_reg_449 <= grp_fu_144_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then
                    tmp_23_cast_reg_454(6 downto 3) <= tmp_23_cast_fu_252_p1(6 downto 3);
                x_reg_472 <= x_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7) and (tmp_reg_404 = ap_const_lv1_0))) then
                    tmp_2_reg_482(30 downto 29) <= tmp_2_fu_294_p3(30 downto 29);    tmp_2_reg_482(36 downto 33) <= tmp_2_fu_294_p3(36 downto 33);    tmp_2_reg_482(39) <= tmp_2_fu_294_p3(39);    tmp_2_reg_482(45) <= tmp_2_fu_294_p3(45);    tmp_2_reg_482(47) <= tmp_2_fu_294_p3(47);    tmp_2_reg_482(50 downto 49) <= tmp_2_fu_294_p3(50 downto 49);    tmp_2_reg_482(52) <= tmp_2_fu_294_p3(52);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                tmp_i1_reg_414 <= tmp_i1_fu_185_p2;
                tmp_i_reg_409 <= tmp_i_fu_179_p2;
                tmp_reg_404 <= tmp_fu_173_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_404 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond1_fu_276_p2))) then
                tmp_i2_reg_477 <= tmp_i2_fu_288_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_404 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond_fu_347_p2))) then
                tmp_i3_reg_510 <= tmp_i3_fu_359_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_404 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_state5))) then
                    u_cast1_cast_reg_439(3 downto 0) <= u_cast1_cast_fu_226_p1(3 downto 0);
                    v_cast2_cast_reg_429(3 downto 0) <= v_cast2_cast_fu_212_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then
                y_reg_505 <= y_fu_353_p2;
            end if;
        end if;
    end process;
    v_cast2_cast_reg_429(7 downto 4) <= "0000";
    tmp_19_cast_reg_434(2 downto 0) <= "000";
    tmp_19_cast_reg_434(7) <= '0';
    u_cast1_cast_reg_439(7 downto 4) <= "0000";
    tmp_21_cast_reg_444(2 downto 0) <= "000";
    tmp_21_cast_reg_444(7) <= '0';
    tmp_23_cast_reg_454(2 downto 0) <= "000";
    tmp_23_cast_reg_454(7) <= '0';
    tmp_2_reg_482(28 downto 0) <= "00000000000000000000000000000";
    tmp_2_reg_482(32 downto 31) <= "00";
    tmp_2_reg_482(38 downto 37) <= "00";
    tmp_2_reg_482(44 downto 40) <= "00000";
    tmp_2_reg_482(46 downto 46) <= "0";
    tmp_2_reg_482(48 downto 48) <= "0";
    tmp_2_reg_482(51 downto 51) <= "0";
    tmp_2_reg_482(63 downto 53) <= "00111111110";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_276_p2, exitcond_fu_347_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_276_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (not((ap_const_lv1_0 = exitcond_fu_347_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    G_2_in_v_fu_373_p3 <= 
        reg_168 when (tmp_reg_404(0) = '1') else 
        grp_fu_144_p2;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state12 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state16 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18 downto 18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20 downto 20);
    ap_CS_fsm_state24 <= ap_CS_fsm(23 downto 23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24 downto 24);
    ap_CS_fsm_state28 <= ap_CS_fsm(27 downto 27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28 downto 28);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, exitcond1_fu_276_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state6) and not((ap_const_lv1_0 = exitcond1_fu_276_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, exitcond1_fu_276_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state6) and not((ap_const_lv1_0 = exitcond1_fu_276_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= G_fu_42;

    cosMat_address0_assign_proc : process(tmp_reg_404, ap_CS_fsm_state16, ap_CS_fsm_state6, exitcond1_fu_276_p2, cosMat_addr_2_reg_492, cosMat_addr_3_reg_497, tmp_24_cast_fu_261_p1, tmp_25_cast_fu_271_p1, ap_CS_fsm_state19)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
            cosMat_address0 <= cosMat_addr_3_reg_497;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            cosMat_address0 <= cosMat_addr_2_reg_492;
        elsif (((tmp_reg_404 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond1_fu_276_p2))) then 
            cosMat_address0 <= tmp_25_cast_fu_271_p1(6 - 1 downto 0);
        elsif ((not((tmp_reg_404 = ap_const_lv1_0)) and (ap_const_lv1_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond1_fu_276_p2))) then 
            cosMat_address0 <= tmp_24_cast_fu_261_p1(6 - 1 downto 0);
        else 
            cosMat_address0 <= "XXXXXX";
        end if; 
    end process;


    cosMat_ce0_assign_proc : process(tmp_reg_404, ap_CS_fsm_state16, ap_CS_fsm_state6, exitcond1_fu_276_p2, ap_CS_fsm_state19)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((tmp_reg_404 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond1_fu_276_p2)) or (not((tmp_reg_404 = ap_const_lv1_0)) and (ap_const_lv1_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond1_fu_276_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_state19)))) then 
            cosMat_ce0 <= ap_const_logic_1;
        else 
            cosMat_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_276_p2 <= "1" when (x_assign_reg_110 = ap_const_lv4_8) else "0";
    exitcond_fu_347_p2 <= "1" when (x_assign_1_reg_121 = ap_const_lv4_8) else "0";

    grp_fu_135_p0_assign_proc : process(subimg_q0, cosMat_q0, ap_CS_fsm_state7, tmp_reg_404, ap_CS_fsm_state9, ap_CS_fsm_state17, ap_CS_fsm_state24, ap_CS_fsm_state20, G_fu_42)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state24))) then 
            grp_fu_135_p0 <= G_fu_42;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            grp_fu_135_p0 <= subimg_q0;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state7) and not((tmp_reg_404 = ap_const_lv1_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state7) and (tmp_reg_404 = ap_const_lv1_0)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_state20)))) then 
            grp_fu_135_p0 <= cosMat_q0;
        else 
            grp_fu_135_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_144_p0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state17, reg_163, reg_168, ap_CS_fsm_state13, ap_CS_fsm_state21, tmp_4_fu_196_p3, ap_CS_fsm_state2, tmp_7_reg_449, tmp_2_reg_482, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state18)))) then 
            grp_fu_144_p0 <= reg_168;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state21)))) then 
            grp_fu_144_p0 <= reg_163;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            grp_fu_144_p0 <= tmp_7_reg_449;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            grp_fu_144_p0 <= tmp_2_reg_482;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            grp_fu_144_p0 <= tmp_4_fu_196_p3;
        else 
            grp_fu_144_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_144_p1_assign_proc : process(reg_152, reg_157, ap_CS_fsm_state9, ap_CS_fsm_state17, ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state2, tmp_6_fu_204_p3, tmp_12_fu_365_p3, tmp_16_reg_520, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            grp_fu_144_p1 <= tmp_16_reg_520;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)))) then 
            grp_fu_144_p1 <= reg_152;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state10)) or ((ap_const_lv1_1 = ap_CS_fsm_state18)))) then 
            grp_fu_144_p1 <= reg_157;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            grp_fu_144_p1 <= tmp_12_fu_365_p3;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            grp_fu_144_p1 <= tmp_6_fu_204_p3;
        else 
            grp_fu_144_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    subimg_address0 <= tmp_26_cast_fu_310_p1(6 - 1 downto 0);

    subimg_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            subimg_ce0 <= ap_const_logic_1;
        else 
            subimg_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_12_fu_365_p3 <= 
        ap_const_lv64_3FE6A09E60000000 when (tmp_i3_reg_510(0) = '1') else 
        ap_const_lv64_3FF0000000000000;
    tmp_18_fu_215_p3 <= (v & ap_const_lv3_0);
    tmp_19_cast_fu_222_p1 <= std_logic_vector(resize(unsigned(tmp_18_fu_215_p3),8));
    tmp_19_fu_229_p3 <= (u & ap_const_lv3_0);
    tmp_20_fu_244_p3 <= (x_assign_reg_110 & ap_const_lv3_0);
    tmp_21_cast_fu_236_p1 <= std_logic_vector(resize(unsigned(tmp_19_fu_229_p3),8));
    tmp_21_fu_256_p2 <= std_logic_vector(unsigned(x_assign_cast2_cast_fu_240_p1) + unsigned(tmp_21_cast_reg_444));
    tmp_22_fu_266_p2 <= std_logic_vector(unsigned(u_cast1_cast_reg_439) + unsigned(tmp_23_cast_fu_252_p1));
    tmp_23_cast_fu_252_p1 <= std_logic_vector(resize(unsigned(tmp_20_fu_244_p3),8));
    tmp_23_fu_305_p2 <= std_logic_vector(unsigned(x_assign_1_cast1_cas_fu_301_p1) + unsigned(tmp_23_cast_reg_454));
    tmp_24_cast_fu_261_p1 <= std_logic_vector(resize(unsigned(tmp_21_fu_256_p2),32));
    tmp_24_fu_315_p2 <= std_logic_vector(unsigned(x_assign_1_cast1_cas_fu_301_p1) + unsigned(tmp_19_cast_reg_434));
    tmp_25_cast_fu_271_p1 <= std_logic_vector(resize(unsigned(tmp_22_fu_266_p2),32));
    tmp_25_fu_325_p3 <= (x_assign_1_reg_121 & ap_const_lv3_0);
    tmp_26_cast_fu_310_p1 <= std_logic_vector(resize(unsigned(tmp_23_fu_305_p2),32));
    tmp_26_fu_337_p2 <= std_logic_vector(unsigned(v_cast2_cast_reg_429) + unsigned(tmp_29_cast_fu_333_p1));
    tmp_27_cast_fu_320_p1 <= std_logic_vector(resize(unsigned(tmp_24_fu_315_p2),32));
    tmp_29_cast_fu_333_p1 <= std_logic_vector(resize(unsigned(tmp_25_fu_325_p3),8));
    tmp_2_fu_294_p3 <= 
        ap_const_lv64_3FC6A09E60000000 when (tmp_i2_reg_477(0) = '1') else 
        ap_const_lv64_3FD0000000000000;
    tmp_30_cast_fu_342_p1 <= std_logic_vector(resize(unsigned(tmp_26_fu_337_p2),32));
    tmp_4_fu_196_p3 <= 
        ap_const_lv64_3FC6A09E60000000 when (tmp_i_reg_409(0) = '1') else 
        ap_const_lv64_3FD0000000000000;
    tmp_6_fu_204_p3 <= 
        ap_const_lv64_3FE6A09E60000000 when (tmp_i1_reg_414(0) = '1') else 
        ap_const_lv64_3FF0000000000000;
    tmp_fu_173_p2 <= "1" when (inv = ap_const_lv32_0) else "0";
    tmp_i1_fu_185_p2 <= "1" when (v = ap_const_lv4_0) else "0";
    tmp_i2_fu_288_p2 <= "1" when (x_assign_reg_110 = ap_const_lv4_0) else "0";
    tmp_i3_fu_359_p2 <= "1" when (x_assign_1_reg_121 = ap_const_lv4_0) else "0";
    tmp_i_fu_179_p2 <= "1" when (u = ap_const_lv4_0) else "0";
    u_cast1_cast_fu_226_p1 <= std_logic_vector(resize(unsigned(u),8));
    v_cast2_cast_fu_212_p1 <= std_logic_vector(resize(unsigned(v),8));
    x_assign_1_cast1_cas_fu_301_p1 <= std_logic_vector(resize(unsigned(x_assign_1_reg_121),8));
    x_assign_cast2_cast_fu_240_p1 <= std_logic_vector(resize(unsigned(x_assign_reg_110),8));
    x_fu_282_p2 <= std_logic_vector(unsigned(x_assign_reg_110) + unsigned(ap_const_lv4_1));
    y_fu_353_p2 <= std_logic_vector(unsigned(x_assign_1_reg_121) + unsigned(ap_const_lv4_1));
end behav;
