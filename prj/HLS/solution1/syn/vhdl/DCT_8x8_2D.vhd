-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DCT_8x8_2D is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    G_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    G_ce0 : OUT STD_LOGIC;
    G_we0 : OUT STD_LOGIC;
    G_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    subimg_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    subimg_ce0 : OUT STD_LOGIC;
    subimg_we0 : OUT STD_LOGIC;
    subimg_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    subimg_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shift : IN STD_LOGIC_VECTOR (31 downto 0);
    inv : IN STD_LOGIC_VECTOR (31 downto 0);
    cosMat_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cosMat_ce0 : OUT STD_LOGIC;
    cosMat_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of DCT_8x8_2D is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "DCT_8x8_2D,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=18.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=15.336000,HLS_SYN_LAT=92282,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=1862,HLS_SYN_LUT=3197}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C3000000 : STD_LOGIC_VECTOR (31 downto 0) := "11000011000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_253 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_cast_fu_156_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_cast_reg_257 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_166_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_265 : STD_LOGIC_VECTOR (3 downto 0);
    signal subimg_addr_reg_270 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_1_fu_192_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_278 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_35_cast_fu_206_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_cast_reg_288 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_2_fu_216_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_296 : STD_LOGIC_VECTOR (3 downto 0);
    signal G_addr_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal j_2_fu_242_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_2_reg_309 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_singleGUV_fu_121_ap_start : STD_LOGIC;
    signal grp_singleGUV_fu_121_ap_done : STD_LOGIC;
    signal grp_singleGUV_fu_121_ap_idle : STD_LOGIC;
    signal grp_singleGUV_fu_121_ap_ready : STD_LOGIC;
    signal grp_singleGUV_fu_121_subimg_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_singleGUV_fu_121_subimg_ce0 : STD_LOGIC;
    signal grp_singleGUV_fu_121_cosMat_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_singleGUV_fu_121_cosMat_ce0 : STD_LOGIC;
    signal grp_singleGUV_fu_121_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_75 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_i_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_i_reg_86 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond1_i_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_97 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_109 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond1_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_grp_singleGUV_fu_121_ap_start : STD_LOGIC := '0';
    signal tmp_33_cast_fu_181_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_cast_fu_231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_148_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_i_cast3_cast_fu_172_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_fu_176_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_fu_198_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_cast1_cast_fu_222_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_226_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component singleGUV IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        subimg_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        subimg_ce0 : OUT STD_LOGIC;
        subimg_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        u : IN STD_LOGIC_VECTOR (3 downto 0);
        v : IN STD_LOGIC_VECTOR (3 downto 0);
        inv : IN STD_LOGIC_VECTOR (31 downto 0);
        cosMat_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cosMat_ce0 : OUT STD_LOGIC;
        cosMat_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DCT_8x8_2D_fadd_3fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_singleGUV_fu_121 : component singleGUV
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_singleGUV_fu_121_ap_start,
        ap_done => grp_singleGUV_fu_121_ap_done,
        ap_idle => grp_singleGUV_fu_121_ap_idle,
        ap_ready => grp_singleGUV_fu_121_ap_ready,
        subimg_address0 => grp_singleGUV_fu_121_subimg_address0,
        subimg_ce0 => grp_singleGUV_fu_121_subimg_ce0,
        subimg_q0 => subimg_q0,
        u => i_reg_97,
        v => j_reg_109,
        inv => inv,
        cosMat_address0 => grp_singleGUV_fu_121_cosMat_address0,
        cosMat_ce0 => grp_singleGUV_fu_121_cosMat_ce0,
        cosMat_q0 => cosMat_q0,
        ap_return => grp_singleGUV_fu_121_ap_return);

    DCT_8x8_2D_fadd_3fYi_U9 : component DCT_8x8_2D_fadd_3fYi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => subimg_q0,
        din1 => ap_const_lv32_C3000000,
        ce => ap_const_logic_1,
        dout => grp_fu_135_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_singleGUV_fu_121_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_singleGUV_fu_121_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond_fu_236_p2))) then 
                    ap_reg_grp_singleGUV_fu_121_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_singleGUV_fu_121_ap_ready)) then 
                    ap_reg_grp_singleGUV_fu_121_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i_reg_75_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and not((tmp_fu_142_p2 = ap_const_lv1_0)))) then 
                i_i_reg_75 <= ap_const_lv4_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = exitcond_i_fu_186_p2)))) then 
                i_i_reg_75 <= i_1_reg_265;
            end if; 
        end if;
    end process;

    i_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = exitcond_fu_236_p2)))) then 
                i_reg_97 <= i_2_reg_296;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and ((tmp_reg_253 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond1_i_fu_160_p2))))) then 
                i_reg_97 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_i_reg_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((tmp_reg_253 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond1_i_fu_160_p2))) then 
                j_i_reg_86 <= ap_const_lv4_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
                j_i_reg_86 <= j_1_reg_278;
            end if; 
        end if;
    end process;

    j_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond1_fu_210_p2))) then 
                j_reg_109 <= ap_const_lv4_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state10) and not((ap_const_logic_0 = grp_singleGUV_fu_121_ap_done)))) then 
                j_reg_109 <= j_2_reg_309;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then
                G_addr_reg_301 <= tmp_36_cast_fu_231_p1(6 - 1 downto 0);
                j_2_reg_309 <= j_2_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((tmp_reg_253 = ap_const_lv1_0)))) then
                i_1_reg_265 <= i_1_fu_166_p2;
                    tmp_32_cast_reg_257(6 downto 3) <= tmp_32_cast_fu_156_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then
                i_2_reg_296 <= i_2_fu_216_p2;
                    tmp_35_cast_reg_288(6 downto 3) <= tmp_35_cast_fu_206_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                j_1_reg_278 <= j_1_fu_192_p2;
                subimg_addr_reg_270 <= tmp_33_cast_fu_181_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                tmp_reg_253 <= tmp_fu_142_p2;
            end if;
        end if;
    end process;
    tmp_32_cast_reg_257(2 downto 0) <= "000";
    tmp_32_cast_reg_257(7) <= '0';
    tmp_35_cast_reg_288(2 downto 0) <= "000";
    tmp_35_cast_reg_288(7) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_reg_253, grp_singleGUV_fu_121_ap_done, exitcond_i_fu_186_p2, exitcond1_i_fu_160_p2, exitcond_fu_236_p2, exitcond1_fu_210_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_reg_253 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond1_i_fu_160_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_lv1_0 = exitcond_i_fu_186_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state8 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_210_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (not((ap_const_lv1_0 = exitcond_fu_236_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (not((ap_const_logic_0 = grp_singleGUV_fu_121_ap_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    G_address0 <= G_addr_reg_301;

    G_ce0_assign_proc : process(grp_singleGUV_fu_121_ap_done, ap_CS_fsm_state10)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10) and not((ap_const_logic_0 = grp_singleGUV_fu_121_ap_done)))) then 
            G_ce0 <= ap_const_logic_1;
        else 
            G_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    G_d0 <= grp_singleGUV_fu_121_ap_return;

    G_we0_assign_proc : process(grp_singleGUV_fu_121_ap_done, ap_CS_fsm_state10)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state10) and not((ap_const_logic_0 = grp_singleGUV_fu_121_ap_done))))) then 
            G_we0 <= ap_const_logic_1;
        else 
            G_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_CS_fsm_state8, exitcond1_fu_210_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state8) and not((ap_const_lv1_0 = exitcond1_fu_210_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, exitcond1_fu_210_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state8) and not((ap_const_lv1_0 = exitcond1_fu_210_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cosMat_address0 <= grp_singleGUV_fu_121_cosMat_address0;
    cosMat_ce0 <= grp_singleGUV_fu_121_cosMat_ce0;
    exitcond1_fu_210_p2 <= "1" when (i_reg_97 = ap_const_lv4_8) else "0";
    exitcond1_i_fu_160_p2 <= "1" when (i_i_reg_75 = ap_const_lv4_8) else "0";
    exitcond_fu_236_p2 <= "1" when (j_reg_109 = ap_const_lv4_8) else "0";
    exitcond_i_fu_186_p2 <= "1" when (j_i_reg_86 = ap_const_lv4_8) else "0";
    grp_singleGUV_fu_121_ap_start <= ap_reg_grp_singleGUV_fu_121_ap_start;
    i_1_fu_166_p2 <= std_logic_vector(unsigned(i_i_reg_75) + unsigned(ap_const_lv4_1));
    i_2_fu_216_p2 <= std_logic_vector(unsigned(i_reg_97) + unsigned(ap_const_lv4_1));
    j_1_fu_192_p2 <= std_logic_vector(unsigned(j_i_reg_86) + unsigned(ap_const_lv4_1));
    j_2_fu_242_p2 <= std_logic_vector(unsigned(j_reg_109) + unsigned(ap_const_lv4_1));
    j_cast1_cast_fu_222_p1 <= std_logic_vector(resize(unsigned(j_reg_109),8));
    j_i_cast3_cast_fu_172_p1 <= std_logic_vector(resize(unsigned(j_i_reg_86),8));

    subimg_address0_assign_proc : process(subimg_addr_reg_270, ap_CS_fsm_state3, grp_singleGUV_fu_121_subimg_address0, ap_CS_fsm_state7, ap_CS_fsm_state10, tmp_33_cast_fu_181_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
            subimg_address0 <= subimg_addr_reg_270;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            subimg_address0 <= tmp_33_cast_fu_181_p1(6 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            subimg_address0 <= grp_singleGUV_fu_121_subimg_address0;
        else 
            subimg_address0 <= "XXXXXX";
        end if; 
    end process;


    subimg_ce0_assign_proc : process(ap_CS_fsm_state3, grp_singleGUV_fu_121_subimg_ce0, ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_state7)))) then 
            subimg_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            subimg_ce0 <= grp_singleGUV_fu_121_subimg_ce0;
        else 
            subimg_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    subimg_d0 <= grp_fu_135_p2;

    subimg_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state7)))) then 
            subimg_we0 <= ap_const_logic_1;
        else 
            subimg_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_27_fu_176_p2 <= std_logic_vector(unsigned(tmp_32_cast_reg_257) + unsigned(j_i_cast3_cast_fu_172_p1));
    tmp_28_fu_198_p3 <= (i_reg_97 & ap_const_lv3_0);
    tmp_29_fu_226_p2 <= std_logic_vector(unsigned(tmp_35_cast_reg_288) + unsigned(j_cast1_cast_fu_222_p1));
    tmp_32_cast_fu_156_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_148_p3),8));
    tmp_33_cast_fu_181_p1 <= std_logic_vector(resize(unsigned(tmp_27_fu_176_p2),32));
    tmp_35_cast_fu_206_p1 <= std_logic_vector(resize(unsigned(tmp_28_fu_198_p3),8));
    tmp_36_cast_fu_231_p1 <= std_logic_vector(resize(unsigned(tmp_29_fu_226_p2),32));
    tmp_fu_142_p2 <= "1" when (shift = ap_const_lv32_1) else "0";
    tmp_s_fu_148_p3 <= (i_i_reg_75 & ap_const_lv3_0);
end behav;
