// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="DCT_8x8_2D,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=18.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=15.336000,HLS_SYN_LAT=92282,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=1862,HLS_SYN_LUT=3197}" *)

module DCT_8x8_2D (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        G_address0,
        G_ce0,
        G_we0,
        G_d0,
        subimg_address0,
        subimg_ce0,
        subimg_we0,
        subimg_d0,
        subimg_q0,
        shift,
        inv,
        cosMat_address0,
        cosMat_ce0,
        cosMat_q0
);

parameter    ap_ST_fsm_state1 = 10'b1;
parameter    ap_ST_fsm_state2 = 10'b10;
parameter    ap_ST_fsm_state3 = 10'b100;
parameter    ap_ST_fsm_state4 = 10'b1000;
parameter    ap_ST_fsm_state5 = 10'b10000;
parameter    ap_ST_fsm_state6 = 10'b100000;
parameter    ap_ST_fsm_state7 = 10'b1000000;
parameter    ap_ST_fsm_state8 = 10'b10000000;
parameter    ap_ST_fsm_state9 = 10'b100000000;
parameter    ap_ST_fsm_state10 = 10'b1000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_C3000000 = 32'b11000011000000000000000000000000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_1 = 4'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] G_address0;
output   G_ce0;
output   G_we0;
output  [31:0] G_d0;
output  [5:0] subimg_address0;
output   subimg_ce0;
output   subimg_we0;
output  [31:0] subimg_d0;
input  [31:0] subimg_q0;
input  [31:0] shift;
input  [31:0] inv;
output  [5:0] cosMat_address0;
output   cosMat_ce0;
input  [31:0] cosMat_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg G_ce0;
reg G_we0;
reg[5:0] subimg_address0;
reg subimg_ce0;
reg subimg_we0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [0:0] tmp_fu_142_p2;
reg   [0:0] tmp_reg_253;
wire   [7:0] tmp_32_cast_fu_156_p1;
reg   [7:0] tmp_32_cast_reg_257;
wire   [0:0] ap_CS_fsm_state2;
wire   [3:0] i_1_fu_166_p2;
reg   [3:0] i_1_reg_265;
reg   [5:0] subimg_addr_reg_270;
wire   [0:0] ap_CS_fsm_state3;
wire   [3:0] j_1_fu_192_p2;
reg   [3:0] j_1_reg_278;
wire   [0:0] ap_CS_fsm_state4;
wire   [7:0] tmp_35_cast_fu_206_p1;
reg   [7:0] tmp_35_cast_reg_288;
wire   [0:0] ap_CS_fsm_state8;
wire   [3:0] i_2_fu_216_p2;
reg   [3:0] i_2_reg_296;
reg   [5:0] G_addr_reg_301;
wire   [0:0] ap_CS_fsm_state9;
wire   [3:0] j_2_fu_242_p2;
reg   [3:0] j_2_reg_309;
wire    grp_singleGUV_fu_121_ap_start;
wire    grp_singleGUV_fu_121_ap_done;
wire    grp_singleGUV_fu_121_ap_idle;
wire    grp_singleGUV_fu_121_ap_ready;
wire   [5:0] grp_singleGUV_fu_121_subimg_address0;
wire    grp_singleGUV_fu_121_subimg_ce0;
wire   [5:0] grp_singleGUV_fu_121_cosMat_address0;
wire    grp_singleGUV_fu_121_cosMat_ce0;
wire   [31:0] grp_singleGUV_fu_121_ap_return;
reg   [3:0] i_i_reg_75;
wire   [0:0] exitcond_i_fu_186_p2;
reg   [3:0] j_i_reg_86;
wire   [0:0] ap_CS_fsm_state7;
wire   [0:0] exitcond1_i_fu_160_p2;
reg   [3:0] i_reg_97;
wire   [0:0] exitcond_fu_236_p2;
reg   [3:0] j_reg_109;
wire   [0:0] ap_CS_fsm_state10;
wire   [0:0] exitcond1_fu_210_p2;
reg    ap_reg_grp_singleGUV_fu_121_ap_start;
wire   [31:0] tmp_33_cast_fu_181_p1;
wire   [31:0] tmp_36_cast_fu_231_p1;
wire   [31:0] grp_fu_135_p2;
wire   [6:0] tmp_s_fu_148_p3;
wire   [7:0] j_i_cast3_cast_fu_172_p1;
wire   [7:0] tmp_27_fu_176_p2;
wire   [6:0] tmp_28_fu_198_p3;
wire   [7:0] j_cast1_cast_fu_222_p1;
wire   [7:0] tmp_29_fu_226_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'b1;
#0 ap_reg_grp_singleGUV_fu_121_ap_start = 1'b0;
end

singleGUV grp_singleGUV_fu_121(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_singleGUV_fu_121_ap_start),
    .ap_done(grp_singleGUV_fu_121_ap_done),
    .ap_idle(grp_singleGUV_fu_121_ap_idle),
    .ap_ready(grp_singleGUV_fu_121_ap_ready),
    .subimg_address0(grp_singleGUV_fu_121_subimg_address0),
    .subimg_ce0(grp_singleGUV_fu_121_subimg_ce0),
    .subimg_q0(subimg_q0),
    .u(i_reg_97),
    .v(j_reg_109),
    .inv(inv),
    .cosMat_address0(grp_singleGUV_fu_121_cosMat_address0),
    .cosMat_ce0(grp_singleGUV_fu_121_cosMat_ce0),
    .cosMat_q0(cosMat_q0),
    .ap_return(grp_singleGUV_fu_121_ap_return)
);

DCT_8x8_2D_fadd_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DCT_8x8_2D_fadd_3fYi_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(subimg_q0),
    .din1(ap_const_lv32_C3000000),
    .ce(1'b1),
    .dout(grp_fu_135_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_singleGUV_fu_121_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == exitcond_fu_236_p2))) begin
            ap_reg_grp_singleGUV_fu_121_ap_start <= 1'b1;
        end else if ((1'b1 == grp_singleGUV_fu_121_ap_ready)) begin
            ap_reg_grp_singleGUV_fu_121_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & ~(tmp_fu_142_p2 == 1'b0))) begin
        i_i_reg_75 <= ap_const_lv4_0;
    end else if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == exitcond_i_fu_186_p2))) begin
        i_i_reg_75 <= i_1_reg_265;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == exitcond_fu_236_p2))) begin
        i_reg_97 <= i_2_reg_296;
    end else if (((1'b1 == ap_CS_fsm_state2) & ((tmp_reg_253 == 1'b0) | ~(1'b0 == exitcond1_i_fu_160_p2)))) begin
        i_reg_97 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_reg_253 == 1'b0) & (1'b0 == exitcond1_i_fu_160_p2))) begin
        j_i_reg_86 <= ap_const_lv4_0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j_i_reg_86 <= j_1_reg_278;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == exitcond1_fu_210_p2))) begin
        j_reg_109 <= ap_const_lv4_0;
    end else if (((1'b1 == ap_CS_fsm_state10) & ~(1'b0 == grp_singleGUV_fu_121_ap_done))) begin
        j_reg_109 <= j_2_reg_309;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        G_addr_reg_301 <= tmp_36_cast_fu_231_p1;
        j_2_reg_309 <= j_2_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_reg_253 == 1'b0))) begin
        i_1_reg_265 <= i_1_fu_166_p2;
        tmp_32_cast_reg_257[6 : 3] <= tmp_32_cast_fu_156_p1[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_2_reg_296 <= i_2_fu_216_p2;
        tmp_35_cast_reg_288[6 : 3] <= tmp_35_cast_fu_206_p1[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_278 <= j_1_fu_192_p2;
        subimg_addr_reg_270 <= tmp_33_cast_fu_181_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        tmp_reg_253 <= tmp_fu_142_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & ~(1'b0 == grp_singleGUV_fu_121_ap_done))) begin
        G_ce0 = 1'b1;
    end else begin
        G_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & ~(1'b0 == grp_singleGUV_fu_121_ap_done))) begin
        G_we0 = 1'b1;
    end else begin
        G_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & ~(1'b0 == exitcond1_fu_210_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & ~(1'b0 == exitcond1_fu_210_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        subimg_address0 = subimg_addr_reg_270;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        subimg_address0 = tmp_33_cast_fu_181_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        subimg_address0 = grp_singleGUV_fu_121_subimg_address0;
    end else begin
        subimg_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7))) begin
        subimg_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        subimg_ce0 = grp_singleGUV_fu_121_subimg_ce0;
    end else begin
        subimg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        subimg_we0 = 1'b1;
    end else begin
        subimg_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_reg_253 == 1'b0) | ~(1'b0 == exitcond1_i_fu_160_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~(1'b0 == exitcond_i_fu_186_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state8 : begin
            if (~(1'b0 == exitcond1_fu_210_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (~(1'b0 == exitcond_fu_236_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (~(1'b0 == grp_singleGUV_fu_121_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign G_address0 = G_addr_reg_301;

assign G_d0 = grp_singleGUV_fu_121_ap_return;

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign cosMat_address0 = grp_singleGUV_fu_121_cosMat_address0;

assign cosMat_ce0 = grp_singleGUV_fu_121_cosMat_ce0;

assign exitcond1_fu_210_p2 = ((i_reg_97 == ap_const_lv4_8) ? 1'b1 : 1'b0);

assign exitcond1_i_fu_160_p2 = ((i_i_reg_75 == ap_const_lv4_8) ? 1'b1 : 1'b0);

assign exitcond_fu_236_p2 = ((j_reg_109 == ap_const_lv4_8) ? 1'b1 : 1'b0);

assign exitcond_i_fu_186_p2 = ((j_i_reg_86 == ap_const_lv4_8) ? 1'b1 : 1'b0);

assign grp_singleGUV_fu_121_ap_start = ap_reg_grp_singleGUV_fu_121_ap_start;

assign i_1_fu_166_p2 = (i_i_reg_75 + ap_const_lv4_1);

assign i_2_fu_216_p2 = (i_reg_97 + ap_const_lv4_1);

assign j_1_fu_192_p2 = (j_i_reg_86 + ap_const_lv4_1);

assign j_2_fu_242_p2 = (j_reg_109 + ap_const_lv4_1);

assign j_cast1_cast_fu_222_p1 = j_reg_109;

assign j_i_cast3_cast_fu_172_p1 = j_i_reg_86;

assign subimg_d0 = grp_fu_135_p2;

assign tmp_27_fu_176_p2 = (tmp_32_cast_reg_257 + j_i_cast3_cast_fu_172_p1);

assign tmp_28_fu_198_p3 = {{i_reg_97}, {ap_const_lv3_0}};

assign tmp_29_fu_226_p2 = (tmp_35_cast_reg_288 + j_cast1_cast_fu_222_p1);

assign tmp_32_cast_fu_156_p1 = tmp_s_fu_148_p3;

assign tmp_33_cast_fu_181_p1 = tmp_27_fu_176_p2;

assign tmp_35_cast_fu_206_p1 = tmp_28_fu_198_p3;

assign tmp_36_cast_fu_231_p1 = tmp_29_fu_226_p2;

assign tmp_fu_142_p2 = ((shift == ap_const_lv32_1) ? 1'b1 : 1'b0);

assign tmp_s_fu_148_p3 = {{i_i_reg_75}, {ap_const_lv3_0}};

always @ (posedge ap_clk) begin
    tmp_32_cast_reg_257[2:0] <= 3'b000;
    tmp_32_cast_reg_257[7] <= 1'b0;
    tmp_35_cast_reg_288[2:0] <= 3'b000;
    tmp_35_cast_reg_288[7] <= 1'b0;
end

endmodule //DCT_8x8_2D
