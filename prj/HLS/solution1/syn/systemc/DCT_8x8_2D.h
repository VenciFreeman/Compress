// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _DCT_8x8_2D_HH_
#define _DCT_8x8_2D_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "singleGUV.h"
#include "DCT_8x8_2D_fadd_3fYi.h"

namespace ap_rtl {

struct DCT_8x8_2D : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<6> > G_address0;
    sc_out< sc_logic > G_ce0;
    sc_out< sc_logic > G_we0;
    sc_out< sc_lv<32> > G_d0;
    sc_out< sc_lv<6> > subimg_address0;
    sc_out< sc_logic > subimg_ce0;
    sc_out< sc_logic > subimg_we0;
    sc_out< sc_lv<32> > subimg_d0;
    sc_in< sc_lv<32> > subimg_q0;
    sc_in< sc_lv<32> > shift;
    sc_in< sc_lv<32> > inv;
    sc_out< sc_lv<6> > cosMat_address0;
    sc_out< sc_logic > cosMat_ce0;
    sc_in< sc_lv<32> > cosMat_q0;
    sc_signal< sc_logic > ap_var_for_const1;
    sc_signal< sc_lv<32> > ap_var_for_const0;


    // Module declarations
    DCT_8x8_2D(sc_module_name name);
    SC_HAS_PROCESS(DCT_8x8_2D);

    ~DCT_8x8_2D();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    singleGUV* grp_singleGUV_fu_121;
    DCT_8x8_2D_fadd_3fYi<1,4,32,32,32>* DCT_8x8_2D_fadd_3fYi_U9;
    sc_signal< sc_lv<10> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > tmp_fu_142_p2;
    sc_signal< sc_lv<1> > tmp_reg_253;
    sc_signal< sc_lv<8> > tmp_32_cast_fu_156_p1;
    sc_signal< sc_lv<8> > tmp_32_cast_reg_257;
    sc_signal< sc_lv<1> > ap_CS_fsm_state2;
    sc_signal< sc_lv<4> > i_1_fu_166_p2;
    sc_signal< sc_lv<4> > i_1_reg_265;
    sc_signal< sc_lv<6> > subimg_addr_reg_270;
    sc_signal< sc_lv<1> > ap_CS_fsm_state3;
    sc_signal< sc_lv<4> > j_1_fu_192_p2;
    sc_signal< sc_lv<4> > j_1_reg_278;
    sc_signal< sc_lv<1> > ap_CS_fsm_state4;
    sc_signal< sc_lv<8> > tmp_35_cast_fu_206_p1;
    sc_signal< sc_lv<8> > tmp_35_cast_reg_288;
    sc_signal< sc_lv<1> > ap_CS_fsm_state8;
    sc_signal< sc_lv<4> > i_2_fu_216_p2;
    sc_signal< sc_lv<4> > i_2_reg_296;
    sc_signal< sc_lv<6> > G_addr_reg_301;
    sc_signal< sc_lv<1> > ap_CS_fsm_state9;
    sc_signal< sc_lv<4> > j_2_fu_242_p2;
    sc_signal< sc_lv<4> > j_2_reg_309;
    sc_signal< sc_logic > grp_singleGUV_fu_121_ap_start;
    sc_signal< sc_logic > grp_singleGUV_fu_121_ap_done;
    sc_signal< sc_logic > grp_singleGUV_fu_121_ap_idle;
    sc_signal< sc_logic > grp_singleGUV_fu_121_ap_ready;
    sc_signal< sc_lv<6> > grp_singleGUV_fu_121_subimg_address0;
    sc_signal< sc_logic > grp_singleGUV_fu_121_subimg_ce0;
    sc_signal< sc_lv<6> > grp_singleGUV_fu_121_cosMat_address0;
    sc_signal< sc_logic > grp_singleGUV_fu_121_cosMat_ce0;
    sc_signal< sc_lv<32> > grp_singleGUV_fu_121_ap_return;
    sc_signal< sc_lv<4> > i_i_reg_75;
    sc_signal< sc_lv<1> > exitcond_i_fu_186_p2;
    sc_signal< sc_lv<4> > j_i_reg_86;
    sc_signal< sc_lv<1> > ap_CS_fsm_state7;
    sc_signal< sc_lv<1> > exitcond1_i_fu_160_p2;
    sc_signal< sc_lv<4> > i_reg_97;
    sc_signal< sc_lv<1> > exitcond_fu_236_p2;
    sc_signal< sc_lv<4> > j_reg_109;
    sc_signal< sc_lv<1> > ap_CS_fsm_state10;
    sc_signal< sc_lv<1> > exitcond1_fu_210_p2;
    sc_signal< sc_logic > ap_reg_grp_singleGUV_fu_121_ap_start;
    sc_signal< sc_lv<32> > tmp_33_cast_fu_181_p1;
    sc_signal< sc_lv<32> > tmp_36_cast_fu_231_p1;
    sc_signal< sc_lv<32> > grp_fu_135_p2;
    sc_signal< sc_lv<7> > tmp_s_fu_148_p3;
    sc_signal< sc_lv<8> > j_i_cast3_cast_fu_172_p1;
    sc_signal< sc_lv<8> > tmp_27_fu_176_p2;
    sc_signal< sc_lv<7> > tmp_28_fu_198_p3;
    sc_signal< sc_lv<8> > j_cast1_cast_fu_222_p1;
    sc_signal< sc_lv<8> > tmp_29_fu_226_p2;
    sc_signal< sc_lv<10> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<10> ap_ST_fsm_state1;
    static const sc_lv<10> ap_ST_fsm_state2;
    static const sc_lv<10> ap_ST_fsm_state3;
    static const sc_lv<10> ap_ST_fsm_state4;
    static const sc_lv<10> ap_ST_fsm_state5;
    static const sc_lv<10> ap_ST_fsm_state6;
    static const sc_lv<10> ap_ST_fsm_state7;
    static const sc_lv<10> ap_ST_fsm_state8;
    static const sc_lv<10> ap_ST_fsm_state9;
    static const sc_lv<10> ap_ST_fsm_state10;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_C3000000;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    // Thread declarations
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_G_address0();
    void thread_G_ce0();
    void thread_G_d0();
    void thread_G_we0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_cosMat_address0();
    void thread_cosMat_ce0();
    void thread_exitcond1_fu_210_p2();
    void thread_exitcond1_i_fu_160_p2();
    void thread_exitcond_fu_236_p2();
    void thread_exitcond_i_fu_186_p2();
    void thread_grp_singleGUV_fu_121_ap_start();
    void thread_i_1_fu_166_p2();
    void thread_i_2_fu_216_p2();
    void thread_j_1_fu_192_p2();
    void thread_j_2_fu_242_p2();
    void thread_j_cast1_cast_fu_222_p1();
    void thread_j_i_cast3_cast_fu_172_p1();
    void thread_subimg_address0();
    void thread_subimg_ce0();
    void thread_subimg_d0();
    void thread_subimg_we0();
    void thread_tmp_27_fu_176_p2();
    void thread_tmp_28_fu_198_p3();
    void thread_tmp_29_fu_226_p2();
    void thread_tmp_32_cast_fu_156_p1();
    void thread_tmp_33_cast_fu_181_p1();
    void thread_tmp_35_cast_fu_206_p1();
    void thread_tmp_36_cast_fu_231_p1();
    void thread_tmp_fu_142_p2();
    void thread_tmp_s_fu_148_p3();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
